name: CI/CD for NomadChef backend services

on:
  push:
    branches:
      - feature/cultureService
      - main
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Backend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify AWS CLI
      run: aws --version

    - name: Verify directory structure
      run: |
        echo "Current directory: $(pwd)"
        ls -la

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm ci

    #- name: Run tests
    #  run: npm test
    #  env:
    #    JWT_SECRET: 264c8b3cbd28b05405dccdbeca1bef49085f69fa68af15f8f87097c950ebc766

    # Create and deploy Lambda Layer
    - name: Create Lambda Layer
      run: |
        # Create layer directory structure
        mkdir -p nodejs
        # Install production dependencies in the nodejs directory
        cd nodejs
        cp ../package.json .
        cp ../package-lock.json .
        npm ci --production
        cd ..
        # Create layer zip
        zip -r layer.zip nodejs

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Deploy Lambda Layer
      run: |
        # Publish new layer version
        LAYER_VERSION=$(aws lambda publish-layer-version \
          --layer-name service-dependencies \
          --description "Dependencies for Services" \
          --zip-file fileb://layer.zip \
          --compatible-runtimes nodejs20.x \
          --query 'Version' \
          --output text)
        
    #     # Update function to use new layer
    #     aws lambda update-function-configuration \
    #       --function-name ${{ secrets.AUTH_SERVICE_ARN }} \
    #       --layers $(aws lambda list-layer-versions --layer-name auth-service-dependencies --query 'LayerVersions[0].LayerVersionArn' --output text)

    # Create and deploy Lambda function without node_modules
    - name: Create function deployment package
      run: |
        # Create a clean deployment directory
        mkdir deployment
        # Copy all files except node_modules and other unnecessary files
        cp -r \
          $(ls -A | grep -v -E 'node_modules|deployment|\.git|layer\.zip|function\.zip') \
          deployment/
        
        # Create zip from deployment directory
        cd deployment
        zip -r ../function.zip .
        cd ..

    # - name: Deploy lambda function to authentication service
    #   run: |
    #     aws lambda update-function-code \
    #       --function-name ${{ secrets.AUTH_SERVICE_ARN }} \
    #       --zip-file fileb://function.zip
    
    # - name: Deploy lambda function to recipe service

    #   run: |
    #     aws lambda update-function-code \
    #       --function-name ${{ secrets.RECIPE_SERVICE_ARN }} \
    #       --zip-file fileb://function.zip

    # - name: Deploy lambda function to user recipe service
    #   run: |
    #     aws lambda update-function-code \
    #       --function-name ${{ secrets.USER_RECIPE_SERVICE_ARN }} \
    #       --zip-file fileb://function.zip

    #- name: Deploy lambda function to user recipe service
    #  run: |
    #    aws lambda update-function-code \
    #      --function-name ${{ secrets.CULTURE_SERVICE_ARN }} \
    #      --zip-file fileb://function.zip
